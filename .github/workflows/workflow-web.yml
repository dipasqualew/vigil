name: Web

on:
  workflow_call:

env:
  PACKAGE_ROOT: ./packages/web

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    needs: test
    environment:
      name: staging
    env:
      VERCEL_ORG_ID: ${{ secrets.WEBSERVICE__VERCEL_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.WEBSERVICE__VERCEL_PROJECT_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VITE_WEBSERVICE__SENTRYDSN: ${{ secrets.WEBSERVICE__SENTRYDSN }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.17'

      - uses: actions/cache@v3
        with:
          path: ${{ env.PACKAGE_ROOT }}/node_modules
          key: web-${{ hashFiles(format('{0}/package-lock.json', env.PACKAGE_ROOT)) }}

      - run: npm install
        working-directory: ${{ env.PACKAGE_ROOT }}

      # - name: Lint the codebase
      #   working-directory: ${{ env.PACKAGE_ROOT }}
      #   run: bun run eslint

      # - name: Run tests
      #   working-directory: ${{ env.PACKAGE_ROOT }}
      #   run: bun x vitest

      - name: Pull Vercel Environment Information
        working-directory: ${{ env.PACKAGE_ROOT }}
        run: npx vercel pull --yes --environment=preview --token=${{ secrets.WEBSERVICE__VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: ${{ env.PACKAGE_ROOT }}
        run: npx vercel build --token=${{ secrets.WEBSERVICE__VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        working-directory: ${{ env.PACKAGE_ROOT }}
        id: deploy-preview
        run: |
          npx vercel deploy --prebuilt --token=${{ secrets.WEBSERVICE__VERCEL_TOKEN }} > vercel-domain.txt
          echo "VERCEL_DEPLOYMENT_URL=$(cat vercel-domain.txt)" >> $GITHUB_OUTPUT
          echo "# Preview URL" >> $GITHUB_STEP_SUMMARY
          echo "$(cat vercel-domain.txt)" >> $GITHUB_STEP_SUMMARY
          echo "::notice title=Preview URL::$(cat vercel-domain.txt)"

    outputs:
      VERCEL_DEPLOYMENT_URL: ${{ steps.deploy-preview.outputs.VERCEL_DEPLOYMENT_URL }}

  # deploy-prod:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.ref == 'refs/heads/main'
  #   environment:
  #     name: prodeu

  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: oven-sh/setup-bun@v1
  #       with:
  #         bun-version: latest

  #     - name: Install dependencies
  #       working-directory: ${{ env.PACKAGE_ROOT }}
  #       run: bun install

  #     - name: Pull Vercel Environment Information
  #       working-directory: ${{ env.PACKAGE_ROOT }}
  #       run: bun x vercel pull --yes --environment=production --token=${{ secrets.WEBSERVICE__VERCEL_TOKEN }}

  #     - name: Build Project Artifacts
  #       working-directory: ${{ env.PACKAGE_ROOT }}
  #       run: bun x vercel build --prod --token=${{ secrets.WEBSERVICE__VERCEL_TOKEN }}

  #     - name: Deploy Project Artifacts to Vercel
  #       working-directory: ${{ env.PACKAGE_ROOT }}
  #       id: deploy-prod
  #       run: |
  #         bun x vercel deploy --prebuilt --token=${{ secrets.WEBSERVICE__VERCEL_TOKEN }} --prod > vercel-domain.txt
  #         echo "VERCEL_DEPLOYMENT_URL=$(cat vercel-domain.txt)" >> $GITHUB_OUTPUT
